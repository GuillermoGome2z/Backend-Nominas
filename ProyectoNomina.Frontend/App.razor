@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <RedirectToLogin />
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p class="text-danger">🚫 Página no encontrada.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        // ✅ Solo hacer esta verificación cuando estés en /registrar-usuario
        if (Navigation.Uri.Contains("/registrar-usuario"))
        {
            try
            {
                var existe = await Http.GetFromJsonAsync<bool>("api/usuarios/existe-usuario");

                // Si ya existe un usuario registrado, redirige al login
                if (existe)
                {
                    Navigation.NavigateTo("/login", forceLoad: true);
                }
            }
            catch
            {
                // No redirigir en caso de error de API para permitir acceso a la vista
                Console.WriteLine("⚠️ Error al verificar existencia de usuario. Continuando sin redirección.");
            }
        }
    }
}
