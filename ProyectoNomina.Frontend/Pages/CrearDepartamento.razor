@page "/departamentos"
@inject HttpClient Http

<h3 class="text-xl font-bold mb-3">🏢 Crear Departamento</h3>

<div class="mb-3">
    <input type="text" @bind="nuevoDepartamento" placeholder="Nombre del Departamento"
           class="border rounded px-3 py-1 w-64" />
</div>

<button class="bg-blue-600 text-white px-4 py-1 rounded"
        @onclick="CrearDepartamentoDto"
        disabled="@string.IsNullOrWhiteSpace(nuevoDepartamento)">
    ➕ Guardar
</button>

@if (!string.IsNullOrEmpty(mensaje))
{
    <p class="text-green-600 mt-2">@mensaje</p>
}

@if (departamentos.Count > 0)
{
    <h4 class="mt-4 font-semibold text-lg mt-4">📋 Departamentos Registrados</h4>
    <ul class="list-disc pl-6">
        @foreach (var dep in departamentos)
        {
            <li><strong>ID:</strong> @dep.Id - @dep.Nombre</li>
        }
    </ul>
}

@code {
    private string nuevoDepartamento = "";
    private string mensaje = "";

    // ✅ Lista de departamentos
    private List<DepartamentoDto> departamentos = new();

    // ✅ Cargar al iniciar la vista
    protected override async Task OnInitializedAsync()
    {
        await CargarDepartamentos();
    }

    private async Task CrearDepartamentoDto()
    {
        var response = await Http.PostAsJsonAsync("api/Departamentos", new { Nombre = nuevoDepartamento });

        if (response.IsSuccessStatusCode)
        {
            mensaje = "✅ Departamento creado correctamente.";
            nuevoDepartamento = "";
            await CargarDepartamentos(); // recargar lista después de guardar
        }
        else
        {
            mensaje = "❌ Error al crear el departamento.";
        }
    }

    private async Task CargarDepartamentos()
    {
        departamentos = await Http.GetFromJsonAsync<List<DepartamentoDto>>("api/Departamentos") ?? new();
    }
}
