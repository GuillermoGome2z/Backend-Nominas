@page "/departamentos"
@inject HttpClient Http
@inject IJSRuntime JS

<h3 class="text-xl font-bold mb-3">🏢 Crear Departamento</h3>

<div class="mb-3">
    <input type="text" @bind="nuevoDepartamento" placeholder="Nombre del Departamento"
           class="border rounded px-3 py-1 w-64" />
</div>

<button class="bg-blue-600 text-white px-4 py-1 rounded"
        @onclick="GuardarDepartamento"
        disabled="@string.IsNullOrWhiteSpace(nuevoDepartamento)">
    @(editando ? "✏️ Actualizar" : "➕ Guardar")
</button>

@if (!string.IsNullOrEmpty(mensaje))
{
    <p class="mt-2 text-@(mensajeCss)">@mensaje</p>
}

@if (departamentos.Count > 0)
{
    <h5 class="mt-4">📋 Departamentos Registrados</h5>
    <ul class="list-unstyled">
        @foreach (var depto in departamentos)
        {
            <li class="mb-2">
                <strong>ID:</strong> @depto.Id - @depto.Nombre
                <div class="btn-group ms-2">
                    <button class="btn btn-sm btn-warning" @onclick="() => EditarDepartamento(depto)">
                        ✏️ Editar
                    </button>
                    <button class="btn btn-sm btn-danger" @onclick="() => EliminarDepartamento(depto.Id)">
                        🗑 Eliminar
                    </button>
                </div>
            </li>
        }
    </ul>
}

@code {
    private string nuevoDepartamento = "";
    private string mensaje = "";
    private string mensajeCss = "text-green-600";

    private List<DepartamentoDto> departamentos = new();

    private bool editando = false;
    private int departamentoEditandoId = 0;

    protected override async Task OnInitializedAsync()
    {
        await CargarDepartamentos();
    }

    private async Task GuardarDepartamento()
    {
        HttpResponseMessage response;

        if (editando)
        {
            response = await Http.PutAsJsonAsync($"api/Departamentos/{departamentoEditandoId}", new { Nombre = nuevoDepartamento });
        }
        else
        {
            response = await Http.PostAsJsonAsync("api/Departamentos", new { Nombre = nuevoDepartamento });
        }

        if (response.IsSuccessStatusCode)
        {
            mensaje = editando ? "✅ Departamento actualizado." : "✅ Departamento creado correctamente.";
            mensajeCss = "text-green-600";
            nuevoDepartamento = "";
            editando = false;
            departamentoEditandoId = 0;
            await CargarDepartamentos();
        }
        else
        {
            try
            {
                var error = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                mensaje = $"❌ {error["mensaje"]}";
            }
            catch
            {
                mensaje = "❌ Error al guardar el departamento.";
            }
            mensajeCss = "text-red-600";
        }
    }

    private async Task CargarDepartamentos()
    {
        departamentos = await Http.GetFromJsonAsync<List<DepartamentoDto>>("api/Departamentos") ?? new();
    }

    private void EditarDepartamento(DepartamentoDto depto)
    {
        nuevoDepartamento = depto.Nombre;
        departamentoEditandoId = depto.Id;
        editando = true;
        mensaje = "";
    }

    private async Task EliminarDepartamento(int id)
    {
        bool confirmar = await JS.InvokeAsync<bool>("confirm", $"¿Está seguro que desea eliminar el departamento ID {id}?");
        if (!confirmar)
            return;

        var response = await Http.DeleteAsync($"api/Departamentos/{id}");
        if (response.IsSuccessStatusCode)
        {
            mensaje = "🗑 Departamento eliminado.";
            mensajeCss = "text-green-600";
            await CargarDepartamentos();
        }
        else
        {
            try
            {
                var error = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                mensaje = $"❌ {error["mensaje"]}";
            }
            catch
            {
                mensaje = "❌ Error al eliminar el departamento.";
            }
            mensajeCss = "text-red-600";
        }
    }
}
