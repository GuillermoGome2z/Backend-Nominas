@page "/reporte-por-empleado"
@inject HttpClient Http

<h3 class="text-2xl font-bold mb-4">👤 Reporte por Empleado</h3>

@if (reporte == null)
{
    <p>Cargando datos...</p>
}
else if (reporte.Count == 0)
{
    <div class="alert alert-warning">⚠️ No hay datos disponibles.</div>
}
else
{
    @foreach (var empleado in reporte.Skip((paginaActual - 1) * itemsPorPagina).Take(itemsPorPagina))
    {
        <div class="mb-6 border rounded-xl shadow p-4 bg-white">
            <h4 class="text-lg font-semibold mb-2">Empleado: @empleado.NombreEmpleado</h4>
            <table class="table-auto w-full border border-gray-200 shadow-sm text-sm">
                <thead class="bg-gray-100">
                    <tr>
                        <th class="p-2 text-left">Tipo de Documento</th>
                        <th class="p-2 text-left">Fecha de Entrega</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var doc in empleado.Documentos)
                    {
                        <tr>
                            <td class="p-2 border-t">@doc.Tipo</td>
                            <td class="p-2 border-t">@doc.Fecha.ToShortDateString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <div class="d-flex justify-content-between align-items-center mt-3">
        <button class="btn btn-outline-primary" @onclick="PaginaAnterior" disabled="@(!PuedeRetroceder)">⬅ Anterior</button>
        <span>Página @paginaActual de @totalPaginas</span>
        <button class="btn btn-outline-primary" @onclick="PaginaSiguiente" disabled="@(!PuedeAvanzar)">Siguiente ➡</button>
    </div>
}

@code {
    private List<ReporteDocumentosEmpleadoDto>? reporte;
    private int paginaActual = 1;
    private int itemsPorPagina = 10;
    private int totalPaginas => reporte is null ? 1 : (int)Math.Ceiling(reporte.Count / (double)itemsPorPagina);
    private bool PuedeAvanzar => paginaActual < totalPaginas;
    private bool PuedeRetroceder => paginaActual > 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            reporte = await Http.GetFromJsonAsync<List<ReporteDocumentosEmpleadoDto>>("api/Reportes/DocumentosPorEmpleado");
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Error al cargar el reporte: " + ex.Message);
            reporte = new();
        }
    }

    private void PaginaSiguiente()
    {
        if (PuedeAvanzar) paginaActual++;
    }

    private void PaginaAnterior()
    {
        if (PuedeRetroceder) paginaActual--;
    }

    public class ReporteDocumentosEmpleadoDto
    {
        public string NombreEmpleado { get; set; } = string.Empty;
        public List<ItemDocumentoDto> Documentos { get; set; } = new();
    }

    public class ItemDocumentoDto
    {
        public string Tipo { get; set; } = string.Empty;
        public DateTime Fecha { get; set; }
    }
}

