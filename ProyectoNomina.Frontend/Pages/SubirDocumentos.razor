@page "/subir-documento"
@inject HttpClient Http
@inject NavigationManager Navigation
@using ProyectoNomina.Shared.Models.DTOs

<h3 class="mb-4">📤 Subir Documento</h3>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert @mensajeCss">@mensaje</div>
}

<EditForm OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Tipo de Documento</label>
        <select class="form-control" @bind="modelo.TipoDocumentoId">
            <option value="0">-- Seleccione tipo --</option>
            @foreach (var tipo in tiposDocumento)
            {
                <option value="@tipo.Id">@tipo.Nombre</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label>Archivo</label>
        <InputFile OnChange="MostrarVistaPrevia" accept=".pdf,image/*" class="form-control" />
    </div>

    @if (!string.IsNullOrEmpty(vistaPreviaBase64))
    {
        <div class="mt-3">
            <h5>Vista previa:</h5>

            @if (tipoMime == "application/pdf")
            {
                <iframe src="@vistaPreviaBase64" width="100%" height="400px"></iframe>
            }
            else if (tipoMime.StartsWith("image/"))
            {
                <img src="@vistaPreviaBase64" class="img-fluid" style="max-height: 400px;" />
            }
            else
            {
                <p>No se puede mostrar vista previa para este tipo de archivo.</p>
            }
        </div>
    }

    <button type="submit" class="btn btn-primary mt-4">📥 Subir</button>
</EditForm>

@code {
    private DocumentoEmpleadoCreateDto modelo = new();
    private List<TipoDocumentoDto> tiposDocumento = new();

    private IBrowserFile? archivoSeleccionado;
    private string? vistaPreviaBase64;
    private string? tipoMime;

    private string mensaje = string.Empty;
    private string mensajeCss = "";

    protected override async Task OnInitializedAsync()
    {
        tiposDocumento = await Http.GetFromJsonAsync<List<TipoDocumentoDto>>("api/TipoDocumento") ?? new();

        // ✅ Obtener el EmpleadoId del usuario autenticado
        try
        {
            modelo.EmpleadoId = await Http.GetFromJsonAsync<int>("api/usuarios/empleado-actual");
        }
        catch
        {
            mensaje = "⚠️ No se pudo identificar al empleado actual.";
            mensajeCss = "alert-danger";
        }
    }

    private async Task MostrarVistaPrevia(InputFileChangeEventArgs e)
    {
        archivoSeleccionado = e.File;

        if (archivoSeleccionado == null)
        {
            vistaPreviaBase64 = null;
            tipoMime = null;
            return;
        }

        tipoMime = archivoSeleccionado.ContentType;

        using var stream = archivoSeleccionado.OpenReadStream(5 * 1024 * 1024);
        var buffer = new byte[archivoSeleccionado.Size];
        await stream.ReadAsync(buffer);
        vistaPreviaBase64 = $"data:{tipoMime};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task HandleSubmit()
    {
        if (modelo.TipoDocumentoId == 0)
        {
            mensaje = "⚠️ Debe seleccionar el tipo de documento.";
            mensajeCss = "alert-warning";
            return;
        }

        if (archivoSeleccionado is null)
        {
            mensaje = "⚠️ Archivo no seleccionado.";
            mensajeCss = "alert-warning";
            return;
        }

        try
        {
            var nombreArchivo = archivoSeleccionado.Name;
            var rutaSimulada = $"documentos/{nombreArchivo}";

            modelo.RutaArchivo = rutaSimulada;

            var response = await Http.PostAsJsonAsync("api/DocumentoEmpleado/subir", modelo);

            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Documento subido correctamente.";
                mensajeCss = "alert-success";
                Navigation.NavigateTo("/lista-documentos");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensaje = $"❌ Error: {error}";
                mensajeCss = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"❌ Excepción: {ex.Message}";
            mensajeCss = "alert-danger";
        }
    }

    private class DocumentoEmpleadoCreateDto
    {
        public int TipoDocumentoId { get; set; }
        public string RutaArchivo { get; set; } = string.Empty;
        public int EmpleadoId { get; set; } // ✅ Usado por backend
    }
}
