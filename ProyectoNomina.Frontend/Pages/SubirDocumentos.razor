@page "/subir-documento" 
@inject HttpClient Http
@using ProyectoNomina.Shared.Models.DTOs
@inject NavigationManager Navigation

<h3 class="mb-4">📤 Subir Documento</h3>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert @mensajeCss">@mensaje</div>
}

<EditForm Model="@modelo" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Empleado</label>
        <select class="form-control" @bind="modelo.EmpleadoId">
            <option value="0">-- Seleccione un empleado --</option>
            @foreach (var emp in empleados)
            {
                <option value="@emp.Id">@emp.NombreCompleto</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label>Tipo de Documento</label>
        <select class="form-control" @bind="modelo.TipoDocumentoId">
            <option value="0">-- Seleccione tipo --</option>
            @foreach (var tipo in tiposDocumento)
            {
                <option value="@tipo.Id">@tipo.Nombre</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label>Archivo</label>
        <InputFile OnChange="OnInputFileChange" />
    </div>

    <button type="submit" class="btn btn-primary">📥 Subir</button>
</EditForm>

@code {
    private DocumentoEmpleadoDto modelo = new();
    private List<EmpleadoDto> empleados = new();
    private List<TipoDocumentoDto> tiposDocumento = new();
    private IBrowserFile? archivoSeleccionado;
    private string mensaje = string.Empty;
    private string mensajeCss = "";

    protected override async Task OnInitializedAsync()
    {
        empleados = await Http.GetFromJsonAsync<List<EmpleadoDto>>("api/Empleados") ?? new();
        tiposDocumento = await Http.GetFromJsonAsync<List<TipoDocumentoDto>>("api/TipoDocumento") ?? new();
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        archivoSeleccionado = e.File;
    }

    private async Task HandleSubmit()
    {
        if (modelo.EmpleadoId == 0 || modelo.TipoDocumentoId == 0)
        {
            mensaje = "⚠️ Debe seleccionar todos los campos.";
            mensajeCss = "alert-warning";
            return;
        }

        if (archivoSeleccionado is null)
        {
            mensaje = "⚠️ Archivo no seleccionado.";
            mensajeCss = "alert-warning";
            return;
        }

        try
        {
            using var content = new MultipartFormDataContent();
            var stream = archivoSeleccionado.OpenReadStream(10_000_000); // 10MB max
            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(archivoSeleccionado.ContentType);

            content.Add(fileContent, "archivo", archivoSeleccionado.Name);
            content.Add(new StringContent(modelo.EmpleadoId.ToString()), "EmpleadoId");
            content.Add(new StringContent(modelo.TipoDocumentoId.ToString()), "TipoDocumentoId");

            var response = await Http.PostAsync("api/DocumentosEmpleado/upload", content);
            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Documento subido correctamente.";
                mensajeCss = "alert-success";
                Navigation.NavigateTo("/lista-documentos");
            }
            else
            {
                mensaje = "❌ Error al subir el documento.";
                mensajeCss = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"❌ Excepción: {ex.Message}";
            mensajeCss = "alert-danger";
        }
    }
}
