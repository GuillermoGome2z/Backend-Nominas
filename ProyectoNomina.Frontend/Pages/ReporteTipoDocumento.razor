@page "/reporte-tipo-documento"
@inject HttpClient Http

<h3 class="mb-4">📄 Reporte por Tipo de Documento</h3>

@if (reporte == null)
{
    <p><em>Cargando datos...</em></p>
}
else if (reporte.Count == 0)
{
    <div class="alert alert-warning">⚠️ No hay datos disponibles.</div>
}
else
{
    <table class="table table-striped">
        <thead class="table-dark">
            <tr>
                <th>Tipo de Documento</th>
                <th>Entregados</th>
                <th>Total Requeridos</th>
                <th>Faltantes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in reporte.Skip((paginaActual - 1) * itemsPorPagina).Take(itemsPorPagina))
            {
                <tr>
                    <td>@item.Tipo</td>
                    <td>@item.Entregados</td>
                    <td>@item.TotalRequeridos</td>
                    <td>@item.Faltantes</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between align-items-center mt-3">
        <button class="btn btn-outline-primary" @onclick="PaginaAnterior" disabled="@(!PuedeRetroceder)">⬅ Anterior</button>
        <span>Página @paginaActual de @totalPaginas</span>
        <button class="btn btn-outline-primary" @onclick="PaginaSiguiente" disabled="@(!PuedeAvanzar)">Siguiente ➡</button>
    </div>
}

@code {
    private List<ItemDocumentoDto> reporte = new();
    private int paginaActual = 1;
    private int itemsPorPagina = 10;
    private int totalPaginas => (int)Math.Ceiling(reporte.Count / (double)itemsPorPagina);
    private bool PuedeAvanzar => paginaActual < totalPaginas;
    private bool PuedeRetroceder => paginaActual > 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            reporte = await Http.GetFromJsonAsync<List<ItemDocumentoDto>>("api/Reportes/PorTipoDocumento") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Error al cargar el reporte: " + ex.Message);
            reporte = new();
        }
    }

    private void PaginaSiguiente()
    {
        if (PuedeAvanzar) paginaActual++;
    }

    private void PaginaAnterior()
    {
        if (PuedeRetroceder) paginaActual--;
    }

    public class ItemDocumentoDto
    {
        public string Tipo { get; set; } = string.Empty;
        public int Entregados { get; set; }
        public int TotalRequeridos { get; set; }
        public int Faltantes { get; set; }
    }
}
