@page "/empleados"
@using ProyectoNomina.Shared.Models.DTOs

<h3 class="text-center my-4">📋 Lista de Empleados</h3>

<div class="d-flex gap-2 mb-3">
    <a class="btn btn-primary" href="/crear-empleado">➕ Nuevo Empleado</a>
    <a class="btn btn-outline-primary" href="/agregar-tipo-documento">➕ Tipo Documento</a>
</div>

@if (empleados == null)
{
    <p>Cargando empleados...</p>
}
else if (empleados.Count == 0)
{
    <p>No hay empleados registrados.</p>
}
else
{
    <table class="table table-striped table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Nombre</th>
                <th>NIT</th>
                <th>DPI</th>
                <th>Departamento</th>
                <th>Puesto</th>
                <th>Salario</th>
                <th>Fecha Contratación</th>
                <th>Estado Laboral</th>
                <th>Fecha Nacimiento</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var e in empleados.Skip((paginaActual - 1) * itemsPorPagina).Take(itemsPorPagina))
            {
                <tr>
                    <td>@e.NombreCompleto</td>
                    <td>@e.NIT</td>
                    <td>@e.DPI</td>
                    <td>@e.NombreDepartamento</td>
                    <td>@e.NombrePuesto</td>
                    <td>Q @e.SalarioMensual.ToString("F2")</td>
                    <td>@e.FechaContratacion.ToShortDateString()</td>
                    <td>@e.EstadoLaboral</td>
                    <td>@e.FechaNacimiento.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-1" @onclick="() => EditarEmpleado(e.Id)">
                            ✏️ Editar
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => EliminarEmpleado(e.Id)">
                            🗑️ Eliminar
                        </button>
                        <button class="btn btn-sm btn-info" @onclick="() => VerAcademica(e.Id)">
                            🎓 Académica
                        </button>
                        <NavLink href="/subir-documento" class="btn btn-outline-primary">
                            📤 Subir Documento
                        </NavLink>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between align-items-center mt-3">
        <button class="btn btn-outline-primary" @onclick="PaginaAnterior" disabled="@(!PuedeRetroceder)">⬅ Anterior</button>
        <span>Página @paginaActual de @totalPaginas</span>
        <button class="btn btn-outline-primary" @onclick="PaginaSiguiente" disabled="@(!PuedeAvanzar)">Siguiente ➡</button>
    </div>
}

@code {
    private List<EmpleadoDto>? empleados;
    private int paginaActual = 1;
    private int itemsPorPagina = 10;
    private int totalPaginas => empleados is null ? 1 : (int)Math.Ceiling(empleados.Count / (double)itemsPorPagina);
    private bool PuedeAvanzar => paginaActual < totalPaginas;
    private bool PuedeRetroceder => paginaActual > 1;

    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            empleados = await Http.GetFromJsonAsync<List<EmpleadoDto>>("api/Empleados");
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Error al cargar empleados: " + ex.Message);
        }
    }

    private void PaginaSiguiente()
    {
        if (PuedeAvanzar) paginaActual++;
    }

    private void PaginaAnterior()
    {
        if (PuedeRetroceder) paginaActual--;
    }

    private void EditarEmpleado(int id)
    {
        Navigation.NavigateTo($"/editar-empleado/{id}");
    }

    private async Task EliminarEmpleado(int id)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Está seguro que desea eliminar al empleado con ID {id}?");
        if (!confirm) return;

        try
        {
            var response = await Http.DeleteAsync($"api/Empleados/{id}");
            if (response.IsSuccessStatusCode)
            {
                empleados = empleados?.Where(e => e.Id != id).ToList();
            }
            else
            {
                Console.WriteLine($"❌ Error al eliminar empleado: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Excepción al eliminar empleado: {ex.Message}");
        }
    }

    private void VerAcademica(int id)
    {
        Navigation.NavigateTo($"/lista-informacion-academica/{id}");
    }
}
