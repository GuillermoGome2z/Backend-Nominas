@page "/auditoria"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using ProyectoNomina.Shared.Models.DTOs
@using System.Globalization

<h3 class="text-center my-4">🕵️ Registro de Auditoría</h3>

<div class="mb-4 d-flex gap-3 align-items-end">
    <div>
        <label for="desde">Desde:</label>
        <InputDate id="desde" @bind-Value="filtroDesde" class="form-control" />
    </div>
    <div>
        <label for="hasta">Hasta:</label>
        <InputDate id="hasta" @bind-Value="filtroHasta" class="form-control" />
    </div>
    <button class="btn btn-primary" @onclick="AplicarFiltro">🔍 Filtrar</button>
    <button class="btn btn-secondary" @onclick="LimpiarFiltro">🔄 Limpiar</button>
</div>

@if (auditorias == null)
{
    <p>Cargando datos...</p>
}
else if (!auditoriasFiltradas.Any())
{
    <p>No hay registros que coincidan con los filtros.</p>
}
else
{
    <table class="table table-bordered table-hover text-sm">
        <thead class="table-dark">
            <tr>
                <th>IDENTIFICACIÓN</th>
                <th>Acción</th>
                <th>Usuario</th>
                <th>Fecha</th>
                <th>Punto final</th>
                <th>Detalles</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var a in auditoriasFiltradas.Skip((paginaActual - 1) * itemsPorPagina).Take(itemsPorPagina))
            {
                <tr>
                    <td>@a.Id</td>
                    <td>@a.Accion</td>
                    <td>@a.Usuario</td>
                    <td>@a.Fecha.ToString("dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture)</td>
                    <td>@a.Endpoint</td>
                    <td>@a.Detalles</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between align-items-center mt-3">
        <button class="btn btn-outline-primary" @onclick="PaginaAnterior" disabled="@(!PuedeRetroceder)">⬅ Anterior</button>
        <span>Página @paginaActual de @totalPaginas</span>
        <button class="btn btn-outline-primary" @onclick="PaginaSiguiente" disabled="@(!PuedeAvanzar)">Siguiente ➡</button>
    </div>
}

@code {
    private List<AuditoriaDto>? auditorias;
    private List<AuditoriaDto> auditoriasFiltradas = new();

    private int paginaActual = 1;
    private int itemsPorPagina = 10;
    private int totalPaginas => auditoriasFiltradas.Count == 0 ? 1 : (int)Math.Ceiling(auditoriasFiltradas.Count / (double)itemsPorPagina);
    private bool PuedeAvanzar => paginaActual < totalPaginas;
    private bool PuedeRetroceder => paginaActual > 1;

    private DateTime? filtroDesde;
    private DateTime? filtroHasta;

    protected override async Task OnInitializedAsync()
    {
        auditorias = await Http.GetFromJsonAsync<List<AuditoriaDto>>("api/Auditoria");
        auditoriasFiltradas = auditorias ?? new();
    }

    private void AplicarFiltro()
    {
        if (auditorias == null) return;

        auditoriasFiltradas = auditorias
            .Where(a =>
                (!filtroDesde.HasValue || a.Fecha.Date >= filtroDesde.Value.Date) &&
                (!filtroHasta.HasValue || a.Fecha.Date <= filtroHasta.Value.Date))
            .ToList();

        paginaActual = 1;
    }

    private void LimpiarFiltro()
    {
        filtroDesde = null;
        filtroHasta = null;
        auditoriasFiltradas = auditorias ?? new();
        paginaActual = 1;
    }

    private void PaginaSiguiente()
    {
        if (PuedeAvanzar) paginaActual++;
    }

    private void PaginaAnterior()
    {
        if (PuedeRetroceder) paginaActual--;
    }
}
