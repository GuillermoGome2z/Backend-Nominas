@page "/registrar-usuario"
@using ProyectoNomina.Shared.Models.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation

<h3 class="text-2xl font-bold mb-4">👤 Registrarse Nuevo Usuario</h3>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert @(esExito ? "alert-success" : "alert-danger")">
        @mensaje
    </div>
}

@if (mostrarFormulario)
{
    <EditForm Model="usuario" OnValidSubmit="RegistrarNuevoUsuario">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Nombre completo</label>
            <InputText class="form-control" @bind-Value="usuario.Nombre" />
            <ValidationMessage For="@(() => usuario.Nombre)" />
        </div>

        <div class="mb-3">
            <label>Correo</label>
            <InputText class="form-control" @bind-Value="usuario.Correo" />
            <ValidationMessage For="@(() => usuario.Correo)" />
        </div>

        <div class="mb-3">
            <label>Contraseña</label>
            <InputText type="password" class="form-control" @bind-Value="usuario.Contraseña" />
            <ValidationMessage For="@(() => usuario.Contraseña)" />
        </div>

        <button class="btn btn-success">Crear usuario</button>
    </EditForm>
}
else
{
    <div class="alert alert-danger">❌ No se pudo cargar el formulario.</div>
}

@code {
    private RegistrarUsuarioDto usuario = new();
    private string mensaje = string.Empty;
    private bool esExito = false;
    private bool mostrarFormulario = true;

    private async Task RegistrarNuevoUsuario()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/usuarios/registrar", usuario);

            if (response.IsSuccessStatusCode)
            {
                esExito = true;
                mensaje = "✅ Usuario creado correctamente. Redirigiendo...";
                await Task.Delay(2000);
                Navigation.NavigateTo("/login", forceLoad: true);
            }
            else
            {
                esExito = false;
                var error = await response.Content.ReadAsStringAsync();
                mensaje = $"❌ Error: {error}";
            }
        }
        catch (Exception ex)
        {
            esExito = false;
            mensaje = $"❌ Error de red: {ex.Message}";
        }
    }
}
