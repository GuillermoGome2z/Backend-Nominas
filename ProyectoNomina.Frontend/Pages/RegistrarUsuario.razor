@page "/registrar-usuario"
@using ProyectoNomina.Shared.Models.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation

<h3 class="text-2xl font-bold mb-4">👤 Registrarse Nuevo Usuario</h3>

@if (!string.IsNullOrEmpty(mensajeExito))
{
    <div class="p-2 rounded text-white mb-3" style="background-color: seagreen">
        @mensajeExito
    </div>
}

@if (mostrarFormulario)
{
    <EditForm Model="usuario" OnValidSubmit="RegistrarNuevoUsuario">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label>Nombre completo</label>
            <InputText class="form-control" @bind-Value="usuario.NombreCompleto" />
            <ValidationMessage For="@(() => usuario.NombreCompleto)" />
        </div>

        <div class="mb-3">
            <label>Correo</label>
            <InputText class="form-control" @bind-Value="usuario.Correo" />
            <ValidationMessage For="@(() => usuario.Correo)" />
        </div>

        <div class="mb-3">
            <label>Contraseña</label>
            <InputText type="password" class="form-control" @bind-Value="usuario.Clave" />
            <ValidationMessage For="@(() => usuario.Clave)" />
        </div>


        <button class="btn btn-success">Crear usuario</button>
    </EditForm>
}
else
{
    <p class="text-gray-600">Redirigiendo al inicio de sesión...</p>
}

@code {
    private RegistrarUsuarioDto usuario = new();
    private string mensajeExito = string.Empty;
    private bool mostrarFormulario = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var existe = await Http.GetFromJsonAsync<bool>("api/usuarios/existe-usuario");
            mostrarFormulario = true;

        }
        catch
        {
            mensajeExito = "❌ Error al cargar la vista de registro.";
        }
    }

    private async Task RegistrarNuevoUsuario()
    {
        var response = await Http.PostAsJsonAsync("api/usuarios/registrar", usuario);
        if (response.IsSuccessStatusCode)
        {
            mensajeExito = "✅ Usuario creado correctamente.";
            usuario = new();
            await Task.Delay(2000);
            mensajeExito = string.Empty;
            StateHasChanged();
        }
        else
        {
            mensajeExito = "❌ Error: " + await response.Content.ReadAsStringAsync();
        }
    }
}
