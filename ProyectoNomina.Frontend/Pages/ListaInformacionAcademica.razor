@page "/lista-informacion-academica/{empleadoId:int}"
@using ProyectoNomina.Shared.Models.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3 class="text-center my-4">📄 Información Académica</h3>

<button class="btn btn-primary mb-3" @onclick="AgregarNueva">
    ➕ Agregar Nueva
</button>

@if (informacion == null)
{
    <p>Cargando información académica...</p>
}
else if (!informacion.Any())
{
    <p>No hay registros académicos para este empleado.</p>
}
else
{
    <table class="table table-bordered table-striped">
        <thead class="table-dark">
            <tr>
                <th>Título</th>
                <th>Institución</th>
                <th>Fecha de Graduación</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in informacion)
            {
                <tr>
                    <td>@i.Titulo</td>
                    <td>@i.Institucion</td>
                    <td>@i.FechaGraduacion.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-2" @onclick="() => Editar(i.Id)">
                            ✏️ Editar
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => Eliminar(i.Id)">
                            🗑️ Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public int empleadoId { get; set; }

    private List<InformacionAcademicaDto>? informacion;

    protected override async Task OnInitializedAsync()
    {
        await CargarInformacion();
    }

    private async Task CargarInformacion()
    {
        informacion = await Http.GetFromJsonAsync<List<InformacionAcademicaDto>>("api/InformacionAcademica");
        informacion = informacion?.Where(i => i.EmpleadoId == empleadoId).ToList();
    }

    private void AgregarNueva()
    {
        Navigation.NavigateTo($"/agregar-informacion-academica/{empleadoId}");
    }

    private async Task Eliminar(int id)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "¿Desea eliminar este registro académico?");
        if (!confirm) return;

        var response = await Http.DeleteAsync($"api/InformacionAcademica/{id}");

        if (response.IsSuccessStatusCode)
        {
            await CargarInformacion();
        }
        else
        {
            Console.WriteLine("❌ Error al eliminar registro.");
        }
    }
    private void Editar(int id)
    {
        Navigation.NavigateTo($"/editar-informacion-academica/{id}");
    }
}
