@page "/asignar-empleado"
@inject HttpClient Http
@inject IJSRuntime JS
@using ProyectoNomina.Shared.Models.DTOs

<h3 class="mb-4">🔗 Asignar Empleado a Usuario</h3>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert @mensajeCss">@mensaje</div>
}

<EditForm Model="@modeloAsignacion" OnValidSubmit="Asignar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Usuario sin empleado</label>
        <select class="form-control" @bind="modeloAsignacion.UsuarioId">
            <option value="0">-- Seleccione un usuario --</option>
            @foreach (var usuario in usuarios)
            {
                <option value="@usuario.Id">@usuario.NombreCompleto (@usuario.Correo)</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label>Empleado sin usuario</label>
        <select class="form-control" @bind="modeloAsignacion.EmpleadoId">
            <option value="0">-- Seleccione un empleado --</option>
            @foreach (var emp in empleados)
            {
                <option value="@emp.Id">@emp.NombreCompleto</option>
            }
        </select>
    </div>

    <button class="btn btn-primary">Asignar</button>
</EditForm>

@code {
    private class AsignacionModel
    {
        public int UsuarioId { get; set; }
        public int EmpleadoId { get; set; }
    }

    private AsignacionModel modeloAsignacion = new();
    private List<UsuarioDto> usuarios = new();
    private List<EmpleadoDto> empleados = new();

    private string mensaje = string.Empty;
    private string mensajeCss = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        usuarios = await Http.GetFromJsonAsync<List<UsuarioDto>>("api/usuarios/sin-empleado") ?? new();
        empleados = await Http.GetFromJsonAsync<List<EmpleadoDto>>("api/empleados/sin-usuario") ?? new();
    }

    private async Task Asignar()
    {
        if (modeloAsignacion.UsuarioId == 0 || modeloAsignacion.EmpleadoId == 0)
        {
            mensaje = "⚠️ Debe seleccionar un usuario y un empleado.";
            mensajeCss = "alert-warning";
            return;
        }

        bool confirmado = await JS.InvokeAsync<bool>("confirm", "¿Está seguro que desea asignar este empleado al usuario?");
        if (!confirmado) return;

        var response = await Http.PutAsync(
            $"api/usuarios/asignar-empleado?usuarioId={modeloAsignacion.UsuarioId}&empleadoId={modeloAsignacion.EmpleadoId}",
            null
        );

        if (response.IsSuccessStatusCode)
        {
            mensaje = "✅ Empleado asignado correctamente.";
            mensajeCss = "alert-success";
            modeloAsignacion = new();

            usuarios = await Http.GetFromJsonAsync<List<UsuarioDto>>("api/usuarios/sin-empleado") ?? new();
            empleados = await Http.GetFromJsonAsync<List<EmpleadoDto>>("api/empleados/sin-usuario") ?? new();
        }
        else
        {
            mensaje = "❌ Error: " + await response.Content.ReadAsStringAsync();
            mensajeCss = "alert-danger";
        }
    }
}
