@page "/editar-documento/{id:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@using ProyectoNomina.Shared.Models.DTOs

<h3 class="mb-4">✏️ Editar Documento</h3>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert @mensajeCss">@mensaje</div>
}

@if (modelo is not null)
{
    <EditForm Model="@modelo" OnValidSubmit="ActualizarDocumento">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Empleado</label>
            <input class="form-control" value="@modelo.NombreEmpleado" disabled />
        </div>

        <div class="mb-3">
            <label>Tipo de Documento</label>
            <select class="form-control" @bind="modelo.TipoDocumentoId">
                @foreach (var tipo in tiposDocumento)
                {
                    <option value="@tipo.Id">@tipo.Nombre</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label>Reemplazar archivo</label>
            <InputFile OnChange="OnFileSelected" accept=".pdf,image/*" class="form-control" />
        </div>

        @if (!string.IsNullOrEmpty(vistaPreviaBase64))
        {
            <div class="mt-3">
                <h5>Vista previa del nuevo archivo:</h5>
                @if (tipoMime == "application/pdf")
                {
                    <iframe src="@vistaPreviaBase64" width="100%" height="400px"></iframe>
                }
                else if (tipoMime.StartsWith("image/"))
                {
                    <img src="@vistaPreviaBase64" class="img-fluid" style="max-height: 400px;" />
                }
            </div>
        }

        <button type="submit" class="btn btn-success mt-4">💾 Actualizar</button>
    </EditForm>
}

@code {
    [Parameter] public int id { get; set; }

    private DocumentoEmpleadoDto? modelo;
    private List<TipoDocumentoDto> tiposDocumento = new();
    private IBrowserFile? nuevoArchivo;
    private string? vistaPreviaBase64;
    private string? tipoMime;

    private string mensaje = string.Empty;
    private string mensajeCss = "";

    protected override async Task OnInitializedAsync()
    {
        tiposDocumento = await Http.GetFromJsonAsync<List<TipoDocumentoDto>>("api/TipoDocumento") ?? new();
        modelo = await Http.GetFromJsonAsync<DocumentoEmpleadoDto>($"api/DocumentosEmpleado/{id}");
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        nuevoArchivo = e.File;
        tipoMime = nuevoArchivo.ContentType;

        using var stream = nuevoArchivo.OpenReadStream(5 * 1024 * 1024);
        var buffer = new byte[nuevoArchivo.Size];
        await stream.ReadAsync(buffer);
        vistaPreviaBase64 = $"data:{tipoMime};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task ActualizarDocumento()
    {
        try
        {
            using var content = new MultipartFormDataContent();
            content.Add(new StringContent(modelo!.TipoDocumentoId.ToString()), "TipoDocumentoId");

            if (nuevoArchivo is not null)
            {
                var stream = nuevoArchivo.OpenReadStream(10_000_000);
                var fileContent = new StreamContent(stream);
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(nuevoArchivo.ContentType);
                content.Add(fileContent, "archivo", nuevoArchivo.Name);
            }

            var response = await Http.PutAsync($"api/DocumentosEmpleado/{id}", content);

            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Documento actualizado correctamente.";
                mensajeCss = "alert-success";
                Navigation.NavigateTo("/lista-documentos");
            }
            else
            {
                mensaje = "❌ Error al actualizar el documento.";
                mensajeCss = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"❌ Excepción: {ex.Message}";
            mensajeCss = "alert-danger";
        }
    }
}
