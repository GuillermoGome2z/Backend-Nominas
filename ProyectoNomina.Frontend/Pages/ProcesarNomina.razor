@page "/procesar-nomina"
@inject HttpClient Http
@inject NavigationManager Navigation
@using ProyectoNomina.Shared.Models.DTOs
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin,RRHH")]

<h3 class="text-2xl font-bold mb-4">📅 Procesar Nómina</h3>

<div class="mb-4">
    <label class="block mb-1 font-semibold">Descripción</label>
    <input @bind="descripcion" class="border px-3 py-1 w-full rounded shadow" placeholder="Ej: Nómina primera quincena de junio" />
</div>

<button class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
        @onclick="Procesar"
        disabled="@string.IsNullOrWhiteSpace(descripcion)">
    ✅ Procesar Nómina
</button>

@if (!string.IsNullOrEmpty(mensaje))
{
    <p class="mt-4 font-semibold text-green-600">@mensaje</p>
}

@if (!string.IsNullOrEmpty(error))
{
    <p class="mt-4 font-semibold text-red-600">@error</p>
}

@if (nominas is null)
{
    <p class="text-gray-500 mt-5">⏳ Cargando nóminas procesadas...</p>
}
else if (nominas.Count == 0)
{
    <div class="alert alert-warning mt-5">⚠️ No hay nóminas procesadas aún.</div>
}
else
{
    <h4 class="mt-5 mb-3 font-semibold">📋 Nóminas Procesadas</h4>

    <table class="table table-striped">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Descripción</th>
                <th>Fecha Generación</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var n in nominas.Skip((paginaActual - 1) * itemsPorPagina).Take(itemsPorPagina))
            {
                <tr>
                    <td>@n.Id</td>
                    <td>@n.Descripcion</td>
                    <td>@n.FechaGeneracion.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between align-items-center mt-3">
        <button class="btn btn-outline-primary" @onclick="PaginaAnterior" disabled="@(!PuedeRetroceder)">⬅ Anterior</button>
        <span>Página @paginaActual de @totalPaginas</span>
        <button class="btn btn-outline-primary" @onclick="PaginaSiguiente" disabled="@(!PuedeAvanzar)">Siguiente ➡</button>
    </div>
}

@code {
    private string descripcion = "";
    private string mensaje = "";
    private string error = "";
    private List<NominaDto>? nominas;

    private int paginaActual = 1;
    private int itemsPorPagina = 10;
    private int totalPaginas => nominas is null ? 1 : (int)Math.Ceiling(nominas.Count / (double)itemsPorPagina);
    private bool PuedeAvanzar => paginaActual < totalPaginas;
    private bool PuedeRetroceder => paginaActual > 1;

    private void PaginaSiguiente() => paginaActual++;
    private void PaginaAnterior() => paginaActual--;

    private async Task Procesar()
    {
        try
        {
            var content = new StringContent($"\"{descripcion}\"", System.Text.Encoding.UTF8, "application/json");
            var response = await Http.PostAsync("api/Nominas/procesar", content);

            if (response.IsSuccessStatusCode)
            {
                var resultado = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();
                mensaje = resultado?["mensaje"]?.ToString() ?? "Procesado correctamente.";
                descripcion = "";
                error = "";
                await CargarNominas();
            }
            else
            {
                var serverError = await response.Content.ReadAsStringAsync();
                error = $"❌ Error al procesar nómina: {serverError}";
            }
        }
        catch (Exception ex)
        {
            error = $"❌ Error: {ex.Message}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarNominas();
    }

    private async Task CargarNominas()
    {
        try
        {
            nominas = await Http.GetFromJsonAsync<List<NominaDto>>("api/Nominas/listado");
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Error al cargar nóminas: " + ex.Message);
            nominas = new();
        }
    }
}
