@page "/procesar-nomina"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using ProyectoNomina.Shared.Models.DTOs

<h3 class="text-center my-4">📋 Nóminas Generadas</h3>

<div class="row mb-3">
    <div class="col-md-3">
        <label>📅 Desde:</label>
        <InputDate @bind-Value="fechaInicio" class="form-control" />
    </div>
    <div class="col-md-3">
        <label>📅 Hasta:</label>
        <InputDate @bind-Value="fechaFin" class="form-control" />
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <button class="btn btn-secondary" @onclick="FiltrarPorFechas">
            🔍 Filtrar
        </button>
    </div>
    <div class="col-md-3 d-flex align-items-end justify-content-end">
        <button class="btn btn-primary me-2" @onclick="CrearNuevaNomina">
            ➕ Crear Nueva Nómina
        </button>
    </div>
</div>

@if (listaNominasCompletas == null)
{
    <p>Cargando nóminas...</p>
}
else if (!listaNominasCompletas.Any())
{
    <p>No hay nóminas registradas aún.</p>
}
else
{
    var nominasPaginadas = listaNominasCompletas
        .Skip((paginaActual - 1) * itemsPorPagina)
        .Take(itemsPorPagina)
        .ToList();

    foreach (var nomina in nominasPaginadas)
    {
        <div class="card mb-4">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <div>
                    <strong>@nomina.Descripcion</strong> - @nomina.FechaGeneracion.ToShortDateString()
                    @if (nomina.Detalles.Any())
                    {
                        <span class="badge bg-success ms-2">Procesada</span>
                    }
                    else
                    {
                        <span class="badge bg-warning text-dark ms-2">Pendiente</span>
                    }
                </div>
                <div>
                    <button class="btn btn-success btn-sm me-2" @onclick="() => ProcesarNominaExistente(nomina.Id)">
                        ⚙️ Procesar
                    </button>
                    <button class="btn btn-outline-secondary btn-sm me-2" @onclick="() => DescargarPdf(nomina.Id)">
                        🧾 PDF
                    </button>
                    <button class="btn btn-outline-secondary btn-sm me-2" @onclick="() => DescargarExcel(nomina.Id)">
                        📊 Excel
                    </button>
                    <button class="btn btn-outline-danger btn-sm" @onclick="() => EliminarNomina(nomina.Id)">
                        🗑️ Eliminar
                    </button>
                </div>
            </div>
            <div class="card-body">
                @if (nomina.Detalles.Any())
                {
                    <table class="table table-bordered table-sm">
                        <thead>
                            <tr>
                                <th>Empleado</th>
                                <th>Salario Bruto</th>
                                <th>Bonificaciones</th>
                                <th>Deducciones</th>
                                <th>Desglose</th>
                                <th>Salario Neto</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in nomina.Detalles)
                            {
                                <tr>
                                    <td>@detalle.NombreEmpleado</td>
                                    <td>@detalle.SalarioBruto.ToString("C")</td>
                                    <td>@detalle.Bonificaciones.ToString("C")</td>
                                    <td>@detalle.Deducciones.ToString("C")</td>
                                    <td>@detalle.DesgloseDeducciones</td>
                                    <td>@detalle.SalarioNeto.ToString("C")</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr class="table-secondary">
                                <td><strong>Totales:</strong></td>
                                <td>@nomina.Detalles.Sum(x => x.SalarioBruto).ToString("C")</td>
                                <td>@nomina.Detalles.Sum(x => x.Bonificaciones).ToString("C")</td>
                                <td>@nomina.Detalles.Sum(x => x.Deducciones).ToString("C")</td>
                                <td></td>
                                <td>@nomina.Detalles.Sum(x => x.SalarioNeto).ToString("C")</td>
                            </tr>
                        </tfoot>
                    </table>
                }
                else
                {
                    <p class="text-muted">Esta nómina aún no ha sido procesada.</p>
                }
            </div>
        </div>
    }

    <div class="d-flex justify-content-between align-items-center mt-4">
        <button class="btn btn-outline-primary" @onclick="PaginaAnterior" disabled="@(!PuedeRetroceder)">⬅ Anterior</button>
        <span class="fw-semibold">Página @paginaActual de @totalPaginas</span>
        <button class="btn btn-outline-primary" @onclick="PaginaSiguiente" disabled="@(!PuedeAvanzar)">Siguiente ➡</button>
    </div>
}

@code {
    private List<NominaDto>? listaNominasCompletas;
    private DateTime? fechaInicio;
    private DateTime? fechaFin;

    private int paginaActual = 1;
    private int itemsPorPagina = 10;

    private int totalPaginas => listaNominasCompletas is null ? 1 : (int)Math.Ceiling(listaNominasCompletas.Count / (double)itemsPorPagina);
    private bool PuedeAvanzar => paginaActual < totalPaginas;
    private bool PuedeRetroceder => paginaActual > 1;

    protected override async Task OnInitializedAsync()
    {
        listaNominasCompletas = await Http.GetFromJsonAsync<List<NominaDto>>("api/Nominas/completa");
    }

    private void CrearNuevaNomina()
    {
        Navigation.NavigateTo("/crear-nomina");
    }

    private async Task ProcesarNominaExistente(int id)
    {
        var response = await Http.PostAsync($"api/Nominas/procesar/{id}", null);

        if (response.IsSuccessStatusCode)
        {
            await OnInitializedAsync();
            await JSRuntime.InvokeVoidAsync("alert", "✅ Nómina procesada correctamente.");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "❌ Error al procesar la nómina.");
        }
    }


    private async Task EliminarNomina(int nominaId)
    {
        bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro de eliminar esta nómina?");
        if (!confirmar) return;

        var response = await Http.DeleteAsync($"api/Nominas/{nominaId}");
        if (response.IsSuccessStatusCode)
        {
            listaNominasCompletas = await Http.GetFromJsonAsync<List<NominaDto>>("api/Nominas/completa");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "❌ Error al eliminar la nómina.");
        }
    }

    private async Task FiltrarPorFechas()
    {
        var todas = await Http.GetFromJsonAsync<List<NominaDto>>("api/Nominas/completa");

        if (fechaInicio != null && fechaFin != null)
        {
            listaNominasCompletas = todas
                .Where(n => n.FechaGeneracion.Date >= fechaInicio.Value.Date &&
                            n.FechaGeneracion.Date <= fechaFin.Value.Date)
                .ToList();
        }
        else
        {
            listaNominasCompletas = todas;
        }

        paginaActual = 1;
    }

    private void PaginaAnterior()
    {
        if (PuedeRetroceder)
        {
            paginaActual--;
        }
    }

    private void PaginaSiguiente()
    {
        if (PuedeAvanzar)
        {
            paginaActual++;
        }
    }

    private async Task DescargarPdf(int nominaId)
    {
        try
        {
            var pdfBytes = await Http.GetByteArrayAsync($"api/Nominas/GenerarPdf/{nominaId}");

            using var streamRef = new DotNetStreamReference(new MemoryStream(pdfBytes));
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", $"Nomina_{nominaId}.pdf", streamRef);
        }
        catch (HttpRequestException httpEx)
        {
            var response = await Http.GetAsync($"api/Nominas/GenerarPdf/{nominaId}");
            var error = await response.Content.ReadAsStringAsync();
            await JSRuntime.InvokeVoidAsync("alert", $"❌ Error al generar PDF: {error}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"❌ Error inesperado: {ex.Message}");
        }
    }

    private async Task DescargarExcel(int nominaId)
    {
        try
        {
            var response = await Http.GetAsync($"api/Nominas/GenerarExcel/{nominaId}");

            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"❌ Error al generar Excel: {error}");
                return;
            }

            var bytes = await response.Content.ReadAsByteArrayAsync();

            using var streamRef = new DotNetStreamReference(new MemoryStream(bytes));
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", $"Nomina_{nominaId}.xlsx", streamRef);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"❌ Error inesperado: {ex.Message}");
        }
    }

}
